mfm usage example
=================

Suppose we want to create a package called `hello`. We have three source
files:

-----------------------------------------------------
$ cat helloworld.c
#include "hello.h"
int main() {
  hello();
  return;
}

$ cat hello.h
#ifndef HELLO_H
#define HELLO_H
void hello(void);
#endif /* HELLO_H */

$ cat hello.c
#include <stdio.h>
void hello() {
  puts("hello, world");
}
-----------------------------------------------------

We want to compile and link them together to make the program
`helloworld`. We perform the following steps:

1. Create the file MFM, which specifies the rulesets we want to use. We
will use the `c/base` set, which contains rules for compiling C
programs, and the `base` set, which contains some basic convenience
rules.
+
-----------------------------------------------------
(echo c/base; echo base) >MFM
-----------------------------------------------------

2. Create the file BUILD, which specifies which targets to build. We
will use the `all` and `clean` targets (from the `base` ruleset). The
rule for `all` provides a pseudo-target `all` that builds the programs
for the package. It puts itself at the beginning of the Makefile, so
that simply typing `make` will it as the default rule. The `clean`
rule provides a pseudo-target that removes all built targets.
+
-----------------------------------------------------
(echo all; echo clean) >BUILD
-----------------------------------------------------

3. The `all` rule will read the file `ALL` to determine what to build.
We want to build `helloworld`:
+
-----------------------------------------------------
echo helloworld >ALL
-----------------------------------------------------

4. Tell mfm how to build `helloworld`. Because it's an executable, we'll
use the named template rule `x` (provided by `c/base`); to do this, we
create `helloworld=x`. The `x` rule template automatically assumes the
object file helloworld.o will be included; any non-empty lines in
`helloworld=x` point to other object files to link in.
+
-----------------------------------------------------
echo hello.o >helloworld=x
-----------------------------------------------------

5. mfm will figure out how to build `hello.o` and `helloworld.o` from
hello.c and helloworld.c using a suffix rule for `.o` files. Now we can
simply run mfm:
+
-----------------------------------------------------
mfm
-----------------------------------------------------

The resulting Makefile looks like this:

-----------------------------------------------------
# Automatically generated by mfm; do not edit!

all: \
helloworld

compile: \
warn-auto.sh conf-cc
	( cat warn-auto.sh && \
	  echo exec "`head -n 1 conf-cc`" '-o $${1%.c}.o -c $${1+"$$@"}' \
	) > compile.tmp
	chmod 755 compile.tmp
	mv compile.tmp compile

helloworld.o: \
compile helloworld.c hello.h
	./compile helloworld.c

mkex: \
warn-auto.sh conf-ld
	( cat warn-auto.sh && \
	  echo 'main="$$1"; shift' && \
	  echo exec "`head -n 1 conf-ld`" '-o "$$main" "$$main".o $${1+"$$@"}' \
	) > mkex.tmp
	chmod 755 mkex.tmp
	mv mkex.tmp mkex

hello.o: \
compile hello.c
	./compile hello.c

helloworld: \
mkex helloworld.o hello.o
	./mkex helloworld hello.o

clean:
	rm -rf `cat TARGETS`
-----------------------------------------------------

You can see that the rules for building and linking C programs use the
`compile` and `mkex` helper scripts. There are two important things to
note about this:

- the rules from `c/base` already knew about these scripts and
  recursively requested that they be built. As a user of mfm, we had to
  specify only what we wanted to have happen, and the rule templates
  took care of the rest. If we wanted a different style of compiling, we
  could use a different ruleset with different templates.

- these scripts rely on some source files that we didn't write: namely
  `conf-cc` and `conf-ld`. These files were "borrowed" from the `c/base`
  ruleset to meet dependencies. Any dependency can be borrowed in this
  way (if it doesn't have an explicit rule or template for its
  construction).

Note that mfm also generates some auxiliary files. The file `FILES`
contains a list of all source files (i.e., the files that must be
distributed along with the Makefile). The file `CLEAN` contains a list
of all files generated by mfm. This can be used to tidy up the directory
later with `mfm clean`.
